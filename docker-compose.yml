services:
  web:
    container_name: vkcontest_django
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: >
      sh -c "
        python manage.py makemigrations &&
        python manage.py migrate --noinput &&
        python manage.py migrate django_celery_beat &&
        python manage.py migrate django_celery_results &&
        python manage.py collectstatic --noinput &&
        gunicorn core.wsgi:application --bind 0.0.0.0:8080 --workers 1 --threads 2 --timeout 300
      "
    volumes:
      - vk_static:/backend/static
      - vk_media:/backend/media
      - ./backend/robot/migrations:/backend/robot/migrations
    expose:
      - 8080
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    container_name: vkcontest_db
    image: postgres:16.2
    restart: always
    volumes:
      - vk_postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - 5434:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${SQL_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: vkcontest_redis
    image: redis:5-alpine
    restart: always
    volumes:
      - vk_redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: vkcontest_nginx
    build: ./nginx
    restart: always
    volumes:
      - vk_static:/backend/static
      - vk_media:/backend/media
    ports:
      - 81:80
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web:8080"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery_worker:
    container_name: vkcontest_celery_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: celery -A core worker -l info --concurrency=1
    volumes:
      - vk_static:/backend/static
      - vk_media:/backend/media
      - ./backend/robot/migrations:/backend/robot/migrations
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      web:
        condition: service_healthy

  celery_beat:
    container_name: vkcontest_celery_beat
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --max-interval=30
    volumes:
      - vk_static:/backend/static
      - vk_media:/backend/media
      - ./backend/robot/migrations:/backend/robot/migrations
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      web:
        condition: service_healthy

volumes:
  vk_postgres_data:
  vk_static:
  vk_media:
  vk_redis_data:
